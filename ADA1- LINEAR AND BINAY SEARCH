#include<stdio.h>
#include<time.h>
#include<stdlib.h>
int binarysearch(int array[], int start_index, int end_index, int element)
{
   if (end_index >= start_index)
   {
      int middle = start_index + (end_index - start_index )/2;
      if (array[middle] == element)
         return middle;
      if (array[middle] > element)
         return binarysearch(array, start_index, middle-1, element);
      return binarysearch(array, middle+1, end_index, element);
   }
   return -1;
}
int linearsearch(int array[], int start_index, int end_index, int element)
{   int i;
    int flag=0;
    for(i=start_index;i<end_index;i++)
    {
        if(array[i]==element)
        {
            flag=1;
            break;
        }
    }
    if(flag==0)
    {
        return -1;
    }
    else
    {
        return i;
    }
}
void main()
{   int i;
    clock_t start,end;
    int ch;
    int arr[5000];
    int n;
    int key;
    printf("1.Binary Search 2.Linear Search");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:n=1000;
               while(n<=10000)
               {
                   for(i=0;i<n;i++)
                   {
                       arr[i]=i;
                   }
                   key=rand();
                   start=clock();
                   int ret=binarysearch(arr,0,n-1,key);
                   end=clock();
                
                   printf("\nn:%d",n);
                   printf("\nTime(%f milliseconds).\n",((double)(end-start) / (double)CLOCKS_PER_SEC)*1000);
                   n=n+1000;
               }
               break;
        case 2:n=1000;
               while(n<=10000)
               {
                   for(i=0;i<n;i++)
                   {
                       arr[i]=rand();
                   }
                   key=rand();
                   start=clock();
                   int ret=linearsearch(arr,0,n-1,key);
                   end=clock();
                 
                   printf("\nn:%d",n);
                   printf("\nTime(%f milliseconds).\n",((double)(end-start) / (double)CLOCKS_PER_SEC)*1000);
                   n=n+1000;
               }
               break;
    }
}


